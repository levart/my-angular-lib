{"version":3,"file":"cache-compiler-host.js","sourceRoot":"","sources":["../../../../src/lib/ts/cache-compiler-host.ts"],"names":[],"mappings":"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","sourcesContent":["import type { CompilerHost, CompilerOptions } from '@angular/compiler-cli';\nimport { createHash } from 'crypto';\nimport { formatMessages } from 'esbuild';\nimport assert from 'node:assert';\nimport * as path from 'path';\nimport ts from 'typescript';\nimport { NgPackageConfig } from '../../ng-package.schema';\nimport { FileCache } from '../file-system/file-cache';\nimport { BuildGraph } from '../graph/build-graph';\nimport { Node } from '../graph/node';\nimport { EntryPointNode, fileUrl } from '../ng-package/nodes';\nimport { StylesheetProcessor } from '../styles/stylesheet-processor';\nimport { error, warn } from '../utils/log';\nimport { ensureUnixPath } from '../utils/path';\n\nexport function cacheCompilerHost(\n  graph: BuildGraph,\n  entryPoint: EntryPointNode,\n  compilerOptions: CompilerOptions,\n  moduleResolutionCache: ts.ModuleResolutionCache,\n  stylesheetProcessor?: StylesheetProcessor,\n  inlineStyleLanguage?: NgPackageConfig['inlineStyleLanguage'],\n  sourcesFileCache: FileCache = entryPoint.cache.sourcesFileCache,\n): CompilerHost {\n  const compilerHost = ts.createIncrementalCompilerHost(compilerOptions);\n\n  const getNode = (fileName: string) => {\n    const nodeUri = fileUrl(ensureUnixPath(fileName));\n    let node = graph.get(nodeUri);\n\n    if (!node) {\n      node = new Node(nodeUri);\n      graph.put(node);\n    }\n\n    return node;\n  };\n\n  const addDependee = (fileName: string) => {\n    const node = getNode(fileName);\n    entryPoint.dependsOn(node);\n  };\n\n  return {\n    ...compilerHost,\n\n    // Set the parsing mode to the same as TS 5.3+ default for tsc. This provides a parse\n    // performance improvement by skipping non-type related JSDoc parsing.\n    jsDocParsingMode: ts.JSDocParsingMode.ParseForTypeErrors,\n\n    // ts specific\n    getModuleResolutionCache: () => moduleResolutionCache,\n\n    fileExists: (fileName: string) => {\n      const cache = sourcesFileCache.getOrCreate(fileName);\n      if (cache.exists === undefined) {\n        cache.exists = compilerHost.fileExists.call(this, fileName);\n      }\n\n      return cache.exists;\n    },\n\n    getSourceFile: (fileName, languageVersion, onError, shouldCreateNewSourceFile, ...parameters) => {\n      addDependee(fileName);\n      const cache = sourcesFileCache.getOrCreate(fileName);\n\n      if (shouldCreateNewSourceFile || !cache.sourceFile) {\n        cache.sourceFile = compilerHost.getSourceFile.call(\n          this,\n          fileName,\n          languageVersion,\n          onError,\n          true,\n          ...parameters,\n        );\n      }\n\n      return cache.sourceFile;\n    },\n\n    writeFile: (\n      fileName: string,\n      data: string,\n      writeByteOrderMark: boolean,\n      onError?: (message: string) => void,\n      sourceFiles?: ReadonlyArray<ts.SourceFile>,\n    ) => {\n      if (fileName.includes('.ngtypecheck.')) {\n        return;\n      }\n\n      const extension = path.extname(fileName);\n      if (!sourceFiles?.length && extension === '.tsbuildinfo') {\n        // Save builder info contents to specified location\n        compilerHost.writeFile.call(this, fileName, data, writeByteOrderMark, onError, sourceFiles);\n\n        return;\n      }\n\n      assert(sourceFiles?.length === 1, 'Invalid TypeScript program emit for ' + fileName);\n      const outputCache = entryPoint.cache.outputCache;\n      if (outputCache.get(fileName)?.content === data) {\n        return;\n      }\n\n      outputCache.set(fileName, {\n        content: data,\n        version: createHash('sha256').update(data).digest('hex'),\n      });\n    },\n\n    readFile: (fileName: string) => {\n      addDependee(fileName);\n      const cache = sourcesFileCache.getOrCreate(fileName);\n      if (cache.content === undefined) {\n        cache.content = compilerHost.readFile.call(this, fileName);\n      }\n\n      return cache.content;\n    },\n\n    resourceNameToFileName: (resourceName: string, containingFilePath: string) => {\n      const resourcePath = path.resolve(path.dirname(containingFilePath), resourceName);\n      const containingNode = getNode(containingFilePath);\n      const resourceNode = getNode(resourcePath);\n      containingNode.dependsOn(resourceNode);\n\n      return resourcePath;\n    },\n\n    readResource: async (fileName: string) => {\n      addDependee(fileName);\n\n      const cache = sourcesFileCache.getOrCreate(fileName);\n      if (cache.content === undefined) {\n        if (!compilerHost.fileExists(fileName)) {\n          throw new Error(`Cannot read file ${fileName}.`);\n        }\n\n        if (/(?:html?|svg)$/.test(path.extname(fileName))) {\n          // template\n          cache.content = compilerHost.readFile.call(this, fileName);\n        } else {\n          // stylesheet\n          const {\n            referencedFiles,\n            contents,\n            errors: esbuildErrors,\n            warnings: esBuildWarnings,\n          } = await stylesheetProcessor.bundleFile(fileName);\n          const node = getNode(fileName);\n          const depNodes = [...referencedFiles].map(getNode).filter(n => n !== node);\n          node.dependsOn(depNodes);\n\n          for (const n of node.dependees) {\n            if (n.url.endsWith('.ts')) {\n              n.dependsOn(depNodes);\n            }\n          }\n\n          if (esBuildWarnings?.length > 0) {\n            (await formatMessages(esBuildWarnings, { kind: 'warning' })).forEach(msg => warn(msg));\n          }\n\n          if (esbuildErrors?.length > 0) {\n            (await formatMessages(esbuildErrors, { kind: 'error' })).forEach(msg => error(msg));\n\n            throw new Error(`An error has occuried while processing ${fileName}.`);\n          }\n\n          return contents;\n        }\n\n        cache.exists = true;\n      }\n\n      return cache.content;\n    },\n    transformResource: async (data, context) => {\n      const { containingFile, resourceFile, type } = context;\n\n      if (resourceFile || type !== 'style') {\n        return null;\n      }\n\n      if (inlineStyleLanguage) {\n        const {\n          contents,\n          referencedFiles,\n          errors: esbuildErrors,\n          warnings: esBuildWarnings,\n        } = await stylesheetProcessor.bundleInline(\n          data,\n          containingFile,\n          containingFile.endsWith('.html') ? 'css' : inlineStyleLanguage,\n        );\n\n        const node = getNode(containingFile);\n        node.dependsOn([...referencedFiles].map(getNode));\n\n        if (esBuildWarnings?.length > 0) {\n          (await formatMessages(esBuildWarnings, { kind: 'warning' })).forEach(msg => warn(msg));\n        }\n\n        if (esbuildErrors?.length > 0) {\n          (await formatMessages(esbuildErrors, { kind: 'error' })).forEach(msg => error(msg));\n\n          throw new Error(`An error has occuried while processing ${containingFile}.`);\n        }\n\n        return { content: contents };\n      }\n\n      return null;\n    },\n  };\n}\n\nexport function augmentProgramWithVersioning(program: ts.Program): void {\n  const baseGetSourceFiles = program.getSourceFiles;\n  program.getSourceFiles = function (...parameters) {\n    const files: readonly (ts.SourceFile & { version?: string })[] = baseGetSourceFiles(...parameters);\n\n    for (const file of files) {\n      if (file.version === undefined) {\n        file.version = createHash('sha256').update(file.text).digest('hex');\n      }\n    }\n\n    return files;\n  };\n}\n"]}