{"version":3,"file":"fs.js","sourceRoot":"","sources":["../../../../src/lib/utils/fs.ts"],"names":[],"mappings":";;;AAMA,wBAQC;AAED,4BAOC;AAvBD,qCAA8C;AAC9C,+CAAqE;AACrE,yCAAoC;AAEpC,6CAAyF;AAAhF,oGAAA,QAAQ,OAAA;AAAE,qGAAA,SAAS,OAAA;AAAE,kGAAA,MAAM,OAAA;AAAE,iGAAA,KAAK,OAAA;AAAE,gGAAA,IAAI,OAAA;AAAE,iGAAA,EAAE,OAAS;AAEvD,KAAK,UAAU,MAAM,CAAC,IAAc;IACzC,IAAI,CAAC;QACH,MAAM,IAAA,iBAAM,EAAC,IAAI,EAAE,mBAAS,CAAC,IAAI,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC;IACd,CAAC;IAAC,MAAM,CAAC;QACP,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC;AAEM,KAAK,UAAU,QAAQ,CAAC,GAAW,EAAE,IAAY;IACtD,MAAM,GAAG,GAAG,IAAA,mBAAO,EAAC,IAAI,CAAC,CAAC;IAC1B,IAAI,CAAC,CAAC,MAAM,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;QACzB,MAAM,IAAA,gBAAK,EAAC,GAAG,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;IACxC,CAAC;IAED,MAAM,IAAA,mBAAM,EAAC,GAAG,EAAE,IAAI,EAAE,mBAAS,CAAC,gBAAgB,CAAC,CAAC;AACtD,CAAC","sourcesContent":["import { PathLike, constants } from 'node:fs';\nimport { access, copyFile as cpFile, mkdir } from 'node:fs/promises';\nimport { dirname } from 'node:path';\n\nexport { readFile, writeFile, access, mkdir, stat, rm as rmdir } from 'node:fs/promises';\n\nexport async function exists(path: PathLike): Promise<boolean> {\n  try {\n    await access(path, constants.F_OK);\n\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport async function copyFile(src: string, dest: string): Promise<void> {\n  const dir = dirname(dest);\n  if (!(await exists(dir))) {\n    await mkdir(dir, { recursive: true });\n  }\n\n  await cpFile(src, dest, constants.COPYFILE_FICLONE);\n}\n"]}