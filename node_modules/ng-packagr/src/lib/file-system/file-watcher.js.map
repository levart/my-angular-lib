{"version":3,"file":"file-watcher.js","sourceRoot":"","sources":["../../../../src/lib/file-system/file-watcher.ts"],"names":[],"mappings":"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","sourcesContent":["import * as chokidar from 'chokidar';\nimport { platform } from 'os';\nimport * as path from 'path';\nimport { Observable, Observer } from 'rxjs';\nimport { BuildGraph } from '../graph/build-graph';\nimport { Node, STATE_PENDING } from '../graph/node';\nimport { fileUrl, fileUrlPath, isEntryPoint } from '../ng-package/nodes';\nimport * as log from '../utils/log';\nimport { ensureUnixPath } from '../utils/path';\nimport { FileCache } from './file-cache';\n\ntype AllFileWatchEvents = 'change' | 'unlink' | 'add' | 'unlinkDir' | 'addDir';\nexport type FileWatchEvent = Exclude<AllFileWatchEvents, 'unlinkDir' | 'addDir'>;\n\nexport interface FileChangedEvent {\n  filePath: string;\n  event: FileWatchEvent;\n}\n\nexport function createFileWatch(\n  basePaths: string | string[],\n  ignoredPaths: string[] = [],\n  poll?: number,\n): {\n  watcher: chokidar.FSWatcher;\n  onFileChange: Observable<FileChangedEvent>;\n} {\n  log.debug(`Watching for changes: basePath: ${basePaths}, ignoredPaths: ${ignoredPaths}`);\n\n  const watch = chokidar.watch([], {\n    ignoreInitial: true,\n    ignored: [\n      /\\.map$/,\n      /.tsbuildinfo$/,\n      file => {\n        const normalizedPath = ensureUnixPath(file);\n\n        return ignoredPaths.some(f => normalizedPath.startsWith(f));\n      },\n    ],\n    persistent: true,\n    usePolling: typeof poll === 'number' ? true : false,\n    interval: typeof poll === 'number' ? poll : undefined,\n  });\n\n  const isLinux = platform() === 'linux';\n  const handleFileChange = (event: AllFileWatchEvents, filePath: string, observer: Observer<FileChangedEvent>) => {\n    log.debug(`Watch: Path changed. Event: ${event}, Path: ${filePath}`);\n\n    if (isLinux) {\n      // Workaround for Linux where chokidar will not handle future events\n      // for files that were unlinked and immediately recreated.\n      watch.unwatch(filePath);\n      watch.add(filePath);\n    }\n\n    if (event === 'unlinkDir' || event === 'addDir') {\n      // we don't need to trigger on directory removed or renamed as chokidar will fire the changes for each file\n      return;\n    }\n\n    observer.next({\n      filePath: ensureUnixPath(path.resolve(filePath)),\n      event,\n    });\n  };\n\n  return {\n    watcher: watch,\n    onFileChange: new Observable(observer => {\n      watch.on('all', (event: AllFileWatchEvents, filePath: string) => handleFileChange(event, filePath, observer));\n\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      return () => watch.close();\n    }),\n  };\n}\n\n/**\n * Invalidates entry points and cache when specified files change.\n *\n * @returns - Returns `true` if any entry point was invalidated, otherwise `false`.\n */\nexport function invalidateEntryPointsAndCacheOnFileChange(\n  graph: BuildGraph,\n  files: string[],\n  sourcesFileCache: FileCache,\n): boolean {\n  let invalidatedEntryPoint = false;\n  const allNodesToClean: Map<string, Node> = new Map();\n\n  for (const filePath of files) {\n    const changedFileUrl = fileUrl(filePath);\n    const nodeToClean = graph.find(node => changedFileUrl === node.url);\n    if (!nodeToClean) {\n      continue;\n    }\n\n    allNodesToClean.set(filePath, nodeToClean);\n  }\n\n  // delete node that changes\n  const potentialStylesResources = new Set<string>();\n  for (const [filePath, nodeToClean] of allNodesToClean) {\n    sourcesFileCache.delete(filePath);\n\n    if (filePath.endsWith('.ts')) {\n      continue;\n    }\n\n    // if a non ts file changes we need to clean up its direct dependees\n    // this is mainly done for resources such as html and css\n    potentialStylesResources.add(filePath);\n    for (const dependees of nodeToClean.dependees) {\n      const filePath = fileUrlPath(dependees.url);\n      if (!filePath) {\n        continue;\n      }\n\n      allNodesToClean.set(filePath, dependees);\n\n      if (!filePath.endsWith('.ts')) {\n        potentialStylesResources.add(filePath);\n      }\n    }\n  }\n\n  const entryPoints = graph.filter(isEntryPoint);\n  for (const entryPoint of entryPoints) {\n    let isDirty = false;\n    if (potentialStylesResources.size > 0) {\n      isDirty = !!entryPoint.cache.stylesheetProcessor?.invalidate(potentialStylesResources)?.length;\n    }\n\n    for (const [filePath, dependent] of allNodesToClean) {\n      if (!entryPoint.dependents.has(dependent)) {\n        continue;\n      }\n\n      entryPoint.cache.analysesSourcesFileCache.delete(filePath);\n      isDirty = true;\n    }\n\n    if (isDirty) {\n      entryPoint.state = STATE_PENDING;\n      invalidatedEntryPoint = true;\n    }\n  }\n\n  return invalidatedEntryPoint;\n}\n"]}