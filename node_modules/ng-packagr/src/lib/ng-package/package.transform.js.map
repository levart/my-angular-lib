{"version":3,"file":"package.transform.js","sourceRoot":"","sources":["../../../../src/lib/ng-package/package.transform.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uDAA4C;AAC5C,+BAqBc;AACd,8DAAyG;AAEzG,wCAAgG;AAEhG,0CAAwC;AACxC,oCAAoC;AACpC,kDAAoC;AACpC,2DAAuD;AACvD,mCAQiB;AAGjB;;;;;;;;;;;;;;;GAeG;AACI,MAAM,uBAAuB,GAClC,CACE,OAAe,EACf,OAAyB,EACzB,qBAAgC,EAChC,uBAAkC,EAClC,mBAA8B,EAC9B,EAAE,CACJ,CAAC,OAA+B,EAA0B,EAAE;IAC1D,GAAG,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;IAErC,MAAM,cAAc,GAAG,OAAO,CAAC,KAAK;QAClC,CAAC,CAAC,qBAAqB,CAAC,OAAO,EAAE,OAAO,EAAE,uBAAuB,EAAE,mBAAmB,CAAC;QACvF,CAAC,CAAC,qBAAqB,CAAC,OAAO,EAAE,uBAAuB,EAAE,mBAAmB,CAAC,CAAC;IAEjF,MAAM,MAAM,GAAG,IAAA,aAAK,EAAC,OAAO,CAAC,CAAC;IAC9B,MAAM,KAAK,GAAG,IAAI,mBAAW,CAAC,MAAM,CAAC,CAAC;IAEtC,OAAO,OAAO,CAAC,IAAI;IACjB,qCAAqC;IACrC,oFAAoF;IACpF,IAAA,gBAAS,EAAC,KAAK,EAAC,KAAK,EAAC,EAAE;QACtB,KAAK,CAAC,IAAI,GAAG,MAAM,IAAA,oCAAgB,EAAC,EAAE,OAAO,EAAE,CAAC,CAAC;QAEjD,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACjB,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC;QAE5C,IAAI,cAAc,EAAE,CAAC;YACnB,IAAI,CAAC;gBACH,MAAM,IAAA,UAAK,EAAC,IAAI,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;YACzC,CAAC;YAAC,MAAM,CAAC,CAAA,CAAC;QACZ,CAAC;QAED,MAAM,WAAW,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;YACnF,MAAM,EAAE,gBAAgB,EAAE,QAAQ,EAAE,GAAG,UAAU,CAAC;YAClD,MAAM,IAAI,GAAG,IAAI,sBAAc,CAC7B,IAAA,aAAK,EAAC,QAAQ,CAAC,EACf,KAAK,CAAC,KAAK,CAAC,gBAAgB,EAC5B,KAAK,CAAC,KAAK,CAAC,qBAAqB,CAClC,CAAC;YACF,IAAI,CAAC,IAAI,GAAG,EAAE,UAAU,EAAE,gBAAgB,EAAE,CAAC;YAC7C,IAAI,CAAC,KAAK,GAAG,oBAAa,CAAC;YAC3B,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAEtB,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,4BAA4B;QAC5B,OAAO,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAChC,CAAC,CAAC;IACF,+CAA+C;IAC/C,qBAAqB;IACrB,gBAAgB;IAChB,cAAc,EACd,IAAA,eAAQ,EAAC,GAAG,EAAE;;QACZ,KAAK,MAAM,IAAI,IAAI,KAAK,CAAC,UAAU,EAAE,CAAC;YACpC,IAAI,IAAI,YAAY,sBAAc,EAAE,CAAC;gBACnC,MAAA,IAAI,CAAC,KAAK,CAAC,mBAAmB,0CAAE,OAAO,EAAE,CAAC;YAC5C,CAAC;QACH,CAAC;IACH,CAAC,CAAC,CACH,CAAC;AACJ,CAAC,CAAC;AA9DS,QAAA,uBAAuB,2BA8DhC;AAEJ,MAAM,qBAAqB,GACzB,CAAC,OAAe,EAAE,OAAyB,EAAE,uBAAkC,EAAE,mBAA8B,EAAE,EAAE,CACnH,CAAC,OAA+B,EAA0B,EAAE;IAC1D,MAAM,4BAA4B,GAAG,sDAAsD,CAAC;IAC5F,MAAM,kBAAkB,GAAG,6DAA6D,CAAC;IACzF,MAAM,0BAA0B,GAAG,oDAAoD,CAAC;IAExF,OAAO,OAAO,CAAC,IAAI,CACjB,IAAA,gBAAS,EAAC,KAAK,CAAC,EAAE;QAChB,MAAM,EACJ,IAAI,EACJ,KAAK,EAAE,EAAE,gBAAgB,EAAE,GAC5B,GAAG,KAAK,CAAC,IAAI,CAAC,iBAAS,CAAC,CAAC;QAC1B,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,GAAG,IAAA,8BAAe,EAAC,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;QACvF,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;QAExB,OAAO,YAAY,CAAC,IAAI,CACtB,IAAA,UAAG,EAAC,UAAU,CAAC,EAAE,CAAC,IAAA,wDAAyC,EAAC,KAAK,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,gBAAgB,CAAC,CAAC,EAC5G,IAAA,aAAM,EAAC,SAAS,CAAC,EAAE,CAAC,SAAS,CAAC,EAC9B,IAAA,mBAAY,EAAC,GAAG,CAAC,EACjB,IAAA,UAAG,EAAC,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,EACtC,IAAA,gBAAS,EAAC,SAAS,CAAC,EACpB,IAAA,UAAG,EAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CACjB,CAAC;IACJ,CAAC,CAAC,EACF,IAAA,gBAAS,EAAC,KAAK,CAAC,EAAE;QAChB,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC7B,MAAM,MAAM,GAAG,IAAA,aAAK,EAAC,OAAO,CAAC,CAAC;QAC9B,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAEhC,OAAO,IAAA,SAAY,EAAC,KAAK,CAAC,CAAC,IAAI,CAC7B,uBAAuB;QACvB,wFAAwF;QACxF,mBAAmB,CAAC,mBAAmB,CAAC,EACxC,IAAA,aAAM,EAAC,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAA,2BAAmB,GAAE,CAAC,CAAC,CAAC,CAAC,IAAA,SAAE,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,YAAK,CAAC,EAAE,CAAC,EAC5E,IAAA,WAAI,GAAE,EACN,IAAA,UAAG,EAAC,GAAG,EAAE,CAAC,wBAAwB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,EACrD,IAAA,iBAAU,EAAC,KAAK,CAAC,EAAE;YACjB,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACjB,GAAG,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;YAEpC,OAAO,YAAK,CAAC;QACf,CAAC,CAAC,EACF,IAAA,UAAG,EAAC,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC,CACjD,CAAC;IACJ,CAAC,CAAC,CACH,CAAC;AACJ,CAAC,CAAC;AAEJ,MAAM,qBAAqB,GACzB,CAAC,OAAe,EAAE,uBAAkC,EAAE,mBAA8B,EAAE,EAAE,CACxF,CAAC,OAA+B,EAA0B,EAAE;IAC1D,OAAO,OAAO,CAAC,IAAI,CACjB,IAAA,gBAAS,EAAC,KAAK,CAAC,EAAE;QAChB,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC7B,MAAM,MAAM,GAAG,IAAA,aAAK,EAAC,OAAO,CAAC,CAAC;QAC9B,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAEhC,OAAO,IAAA,SAAY,EAAC,KAAK,CAAC,CAAC,IAAI;QAC7B,mEAAmE;QACnE,uBAAuB;QACvB,wFAAwF;QACxF,mBAAmB,CAAC,mBAAmB,CAAC,EACxC,IAAA,UAAG,EAAC,GAAG,EAAE,CAAC,wBAAwB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,CACtD,CAAC;IACJ,CAAC,CAAC,CACH,CAAC;AACJ,CAAC,CAAC;AAEJ,MAAM,mBAAmB,GAAG,CAAC,WAAsB,EAAa,EAAE,CAChE,IAAA,WAAI,EACF,IAAA,gBAAS,EAAC,KAAK,CAAC,EAAE;IAChB,4DAA4D;IAC5D,MAAM,QAAQ,GAAG,IAAI,2BAAQ,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;IACnD,KAAK,MAAM,IAAI,IAAI,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;QAClC,IAAI,CAAC,IAAA,oBAAY,EAAC,IAAI,CAAC,EAAE,CAAC;YACxB,SAAS;QACX,CAAC;QAED,kDAAkD;QAClD,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QACnC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAEvB,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YAClC,IAAI,CAAC,IAAA,oBAAY,EAAC,GAAG,CAAC,EAAE,CAAC;gBACvB,SAAS;YACX,CAAC;YAED,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAChC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACrB,QAAQ,CAAC,aAAa,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QACnC,CAAC;IACH,CAAC;IAED,gCAAgC;IAChC,MAAM,MAAM,GAAG,QAAQ,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,aAAK,CAAC,CAAC;IAElD,oDAAoD;IACpD,OAAO,IAAA,WAAI,EAAC,MAAM,CAAC,CAAC,IAAI,CACtB,IAAA,UAAG,EAAC,CAAC,KAAa,EAAkB,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAA,oBAAY,GAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,KAAK,KAAK,CAAC,CAAC,CAAC,EAC9F,IAAA,aAAM,EAAC,CAAC,UAA0B,EAAW,EAAE,CAAC,UAAU,CAAC,KAAK,KAAK,iBAAU,CAAC,EAChF,IAAA,gBAAS,EAAC,EAAE,CAAC,EAAE,CACb,IAAA,SAAY,EAAC,EAAE,CAAC,CAAC,IAAI;IACnB,wCAAwC;IACxC,IAAA,UAAG,EAAC,UAAU,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,KAAK,GAAG,wBAAiB,CAAC,CAAC,EACzD,IAAA,UAAG,EAAC,GAAG,EAAE,CAAC,KAAK,CAAC,EAChB,WAAW,EACX,IAAA,iBAAU,EAAC,GAAG,CAAC,EAAE;QACf,EAAE,CAAC,KAAK,GAAG,kBAAW,CAAC;QAEvB,MAAM,GAAG,CAAC;IACZ,CAAC,CAAC,CACH,CACF,EACD,IAAA,eAAQ,EAAC,CAAC,CAAC,EAAE,4EAA4E;IACzF,IAAA,qBAAc,EAAC,KAAK,CAAC,CACtB,CAAC;AACJ,CAAC,CAAC,CACH,CAAC;AAEJ,SAAS,wBAAwB,CAAC,SAAe,EAAE,SAAiB;IAClE,GAAG,CAAC,OAAO,CAAC,kFAAkF,CAAC,CAAC;IAChG,GAAG,CAAC,OAAO,CAAC;UACJ,SAAS,CAAC,IAAI,CAAC,GAAG;UAClB,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;IAC/B,GAAG,CAAC,OAAO,CAAC,gFAAgF,CAAC,CAAC;IAC9F,MAAM,CAAC,GAAG,cAAM,CAAC,IAAI,CAAC;IACtB,MAAM,CAAC,GAAG,cAAM,CAAC,KAAK,CAAC;IACvB,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,YAAY,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;AAC3G,CAAC","sourcesContent":["import { DepGraph } from 'dependency-graph';\nimport {\n  EMPTY,\n  NEVER,\n  Observable,\n  catchError,\n  concatMap,\n  debounceTime,\n  defaultIfEmpty,\n  filter,\n  finalize,\n  from,\n  last,\n  map,\n  of as observableOf,\n  of,\n  pipe,\n  repeat,\n  startWith,\n  switchMap,\n  takeLast,\n  tap,\n} from 'rxjs';\nimport { createFileWatch, invalidateEntryPointsAndCacheOnFileChange } from '../file-system/file-watcher';\nimport { BuildGraph } from '../graph/build-graph';\nimport { Node, STATE_DONE, STATE_ERROR, STATE_IN_PROGRESS, STATE_PENDING } from '../graph/node';\nimport { Transform } from '../graph/transform';\nimport { colors } from '../utils/color';\nimport { rmdir } from '../utils/fs';\nimport * as log from '../utils/log';\nimport { discoverPackages } from './discover-packages';\nimport {\n  EntryPointNode,\n  PackageNode,\n  byEntryPoint,\n  isEntryPoint,\n  isEntryPointPending,\n  isPackage,\n  ngUrl,\n} from './nodes';\nimport { NgPackagrOptions } from './options.di';\n\n/**\n * A transformation for building an npm package:\n *\n *  - discoverPackages\n *  - options\n *  - initTsConfig\n *  - analyzeTsSources (thereby extracting template and stylesheet files)\n *  - for each entry point\n *    - run the entryPontTransform\n *\n * @param project Project token, reference to `ng-package.json`\n * @param options ng-packagr options\n * @param initTsConfigTransform Transformation initializing the tsconfig of each entry point.\n * @param analyseSourcesTransform Transformation analyzing the typescript source files of each entry point.\n * @param entryPointTransform Transformation for asset rendering and compilation of a single entry point.\n */\nexport const packageTransformFactory =\n  (\n    project: string,\n    options: NgPackagrOptions,\n    initTsConfigTransform: Transform,\n    analyseSourcesTransform: Transform,\n    entryPointTransform: Transform,\n  ) =>\n  (source$: Observable<BuildGraph>): Observable<BuildGraph> => {\n    log.info(`Building Angular Package`);\n\n    const buildTransform = options.watch\n      ? watchTransformFactory(project, options, analyseSourcesTransform, entryPointTransform)\n      : buildTransformFactory(project, analyseSourcesTransform, entryPointTransform);\n\n    const pkgUri = ngUrl(project);\n    const ngPkg = new PackageNode(pkgUri);\n\n    return source$.pipe(\n      // Discover packages and entry points\n      // Clean the primary dest folder (should clean all secondary sub-directory, as well)\n      switchMap(async graph => {\n        ngPkg.data = await discoverPackages({ project });\n\n        graph.put(ngPkg);\n        const { dest, deleteDestPath } = ngPkg.data;\n\n        if (deleteDestPath) {\n          try {\n            await rmdir(dest, { recursive: true });\n          } catch {}\n        }\n\n        const entryPoints = [ngPkg.data.primary, ...ngPkg.data.secondaries].map(entryPoint => {\n          const { destinationFiles, moduleId } = entryPoint;\n          const node = new EntryPointNode(\n            ngUrl(moduleId),\n            ngPkg.cache.sourcesFileCache,\n            ngPkg.cache.moduleResolutionCache,\n          );\n          node.data = { entryPoint, destinationFiles };\n          node.state = STATE_PENDING;\n          ngPkg.dependsOn(node);\n\n          return node;\n        });\n\n        // Add entry points to graph\n        return graph.put(entryPoints);\n      }),\n      // Initialize the tsconfig for each entry point\n      initTsConfigTransform,\n      // perform build\n      buildTransform,\n      finalize(() => {\n        for (const node of ngPkg.dependents) {\n          if (node instanceof EntryPointNode) {\n            node.cache.stylesheetProcessor?.destroy();\n          }\n        }\n      }),\n    );\n  };\n\nconst watchTransformFactory =\n  (project: string, options: NgPackagrOptions, analyseSourcesTransform: Transform, entryPointTransform: Transform) =>\n  (source$: Observable<BuildGraph>): Observable<BuildGraph> => {\n    const CompleteWaitingForFileChange = '\\nCompilation complete. Watching for file changes...';\n    const FileChangeDetected = '\\nFile change detected. Starting incremental compilation...';\n    const FailedWaitingForFileChange = '\\nCompilation failed. Watching for file changes...';\n\n    return source$.pipe(\n      switchMap(graph => {\n        const {\n          data,\n          cache: { sourcesFileCache },\n        } = graph.find(isPackage);\n        const { onFileChange, watcher } = createFileWatch([], [data.dest + '/'], options.poll);\n        graph.watcher = watcher;\n\n        return onFileChange.pipe(\n          map(fileChange => invalidateEntryPointsAndCacheOnFileChange(graph, [fileChange.filePath], sourcesFileCache)),\n          filter(isChanged => isChanged),\n          debounceTime(100),\n          tap(() => log.msg(FileChangeDetected)),\n          startWith(undefined),\n          map(() => graph),\n        );\n      }),\n      switchMap(graph => {\n        const startTime = Date.now();\n        const pkgUri = ngUrl(project);\n        const ngPkg = graph.get(pkgUri);\n\n        return observableOf(graph).pipe(\n          analyseSourcesTransform,\n          // Next, run through the entry point transformation (assets rendering, code compilation)\n          scheduleEntryPoints(entryPointTransform),\n          repeat({ delay: () => (graph.some(isEntryPointPending()) ? of(1) : EMPTY) }),\n          last(),\n          tap(() => printBuiltAngularPackage(ngPkg, startTime)),\n          catchError(error => {\n            log.error(error);\n            log.msg(FailedWaitingForFileChange);\n\n            return NEVER;\n          }),\n          tap(() => log.msg(CompleteWaitingForFileChange)),\n        );\n      }),\n    );\n  };\n\nconst buildTransformFactory =\n  (project: string, analyseSourcesTransform: Transform, entryPointTransform: Transform) =>\n  (source$: Observable<BuildGraph>): Observable<BuildGraph> => {\n    return source$.pipe(\n      switchMap(graph => {\n        const startTime = Date.now();\n        const pkgUri = ngUrl(project);\n        const ngPkg = graph.get(pkgUri);\n\n        return observableOf(graph).pipe(\n          // Analyse dependencies and external resources for each entry point\n          analyseSourcesTransform,\n          // Next, run through the entry point transformation (assets rendering, code compilation)\n          scheduleEntryPoints(entryPointTransform),\n          tap(() => printBuiltAngularPackage(ngPkg, startTime)),\n        );\n      }),\n    );\n  };\n\nconst scheduleEntryPoints = (epTransform: Transform): Transform =>\n  pipe(\n    concatMap(graph => {\n      // Calculate node/dependency depth and determine build order\n      const depGraph = new DepGraph({ circular: false });\n      for (const node of graph.values()) {\n        if (!isEntryPoint(node)) {\n          continue;\n        }\n\n        // Remove `ng://` prefix for better error messages\n        const from = node.url.substring(5);\n        depGraph.addNode(from);\n\n        for (const dep of node.dependents) {\n          if (!isEntryPoint(dep)) {\n            continue;\n          }\n\n          const to = dep.url.substring(5);\n          depGraph.addNode(to);\n          depGraph.addDependency(from, to);\n        }\n      }\n\n      // The array index is the depth.\n      const groups = depGraph.overallOrder().map(ngUrl);\n\n      // Build entry points with lower depth values first.\n      return from(groups).pipe(\n        map((epUrl: string): EntryPointNode => graph.find(byEntryPoint().and(ep => ep.url === epUrl))),\n        filter((entryPoint: EntryPointNode): boolean => entryPoint.state !== STATE_DONE),\n        concatMap(ep =>\n          observableOf(ep).pipe(\n            // Mark the entry point as 'in-progress'\n            tap(entryPoint => (entryPoint.state = STATE_IN_PROGRESS)),\n            map(() => graph),\n            epTransform,\n            catchError(err => {\n              ep.state = STATE_ERROR;\n\n              throw err;\n            }),\n          ),\n        ),\n        takeLast(1), // don't use last as sometimes it this will cause 'no elements in sequence',\n        defaultIfEmpty(graph),\n      );\n    }),\n  );\n\nfunction printBuiltAngularPackage(ngPackage: Node, startTime: number): void {\n  log.success('\\n------------------------------------------------------------------------------');\n  log.success(`Built Angular Package\n- from: ${ngPackage.data.src}\n- to:   ${ngPackage.data.dest}`);\n  log.success('------------------------------------------------------------------------------');\n  const b = colors.bold;\n  const w = colors.white;\n  log.msg(w(`\\nBuild at: ${b(new Date().toISOString())} - Time: ${b('' + (Date.now() - startTime))}ms\\n`));\n}\n"]}