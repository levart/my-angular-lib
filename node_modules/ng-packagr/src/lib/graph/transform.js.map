{"version":3,"file":"transform.js","sourceRoot":"","sources":["../../../../src/lib/graph/transform.ts"],"names":[],"mappings":";;;AAAA,+BAAuE;AAqBhE,MAAM,oBAAoB,GAAG,CAAC,WAAkC,EAAa,EAAE,CACpF,IAAA,gBAAS,EAAC,KAAK,CAAC,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC;AADlD,QAAA,oBAAoB,wBAC8B","sourcesContent":["import { MonoTypeOperatorFunction, Observable, switchMap } from 'rxjs';\nimport { BuildGraph } from './build-graph';\n\n/**\n * A transformation applied over the build graph.\n *\n * By design, a pipeable operator over `BuildGraph`.\n *  - A transformation takes a `BuildGraph` as input (from previous transformations).\n *  - A transformation performs some operations based on the graph's data, potentially modifying nodes in the graph.\n *  - It returns a `BuildGraph` that will be passed to subsequent transformations.\n *\n * @link https://github.com/ReactiveX/rxjs/blob/master/doc/pipeable-operators.md#pipeable-operators\n */\nexport interface Transform extends MonoTypeOperatorFunction<BuildGraph> {\n  (source$: Observable<BuildGraph>): Observable<BuildGraph>;\n}\n\ninterface PromiseBasedTransform {\n  (graph: BuildGraph): Promise<BuildGraph | void>;\n}\n\nexport const transformFromPromise = (transformFn: PromiseBasedTransform): Transform =>\n  switchMap(graph => transformFn(graph).then(r => r || graph));\n"]}